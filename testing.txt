/*enum E {
    A(i32),
    B(i64),
    C(i128),
}

struct X {
    a: i32,
    b: i32,
    c: i32,
}

compound Shape {
    Circle { radius: f64 },
    Rect { width: f64 :: 0 < $, height: f64 :: 0 < $ }
} + {
    x: f64,
    y: f64,
};*/

include 'std/mod.eee';
let math = std.math;
let and = std.logic.and;
fn prime(x) {
    if x == 2 {
        true
    } else if x < 2 {
        false
    } else {
        let k = 2;
        let max = math.sqrt(x) + 1;
        let has_div = false;
        while and(k < max, !has_div) {
            if math.mod(x, k) == 0 {
                has_div = true
            };
            k += 1
        };
        !has_div
    }
};
let i = 0;
while i < 10000 {
    i += 1;
    if prime(i) {
        show i
    }
}

/*fn fib(x) {
    if x <= 0 {
        0
    } else if x == 1 {
        1
    } else {
        fib(x - 1) + fib(x - 2)
    }
};
let i = 0;
while i < 100 {
    show fib(i);
    i += 1
}*/
