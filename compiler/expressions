Expression:
#priority 0
| expr:NumberLiteral
| expr:StringLiteral
| expr:BooleanLiteral
| expr:Identifier
| expr:AddExpression
| expr:SubstractExpression
| expr:MultiplyExpression
| expr:DivideExpression
| expr:Block
| expr:Lambda
| expr:Group
| expr:FunctionCall
| expr:FieldAccess
| expr:VariableDeclaration
| expr:ConstantDeclaration

Group:
| "(" expr:Expression ")"

AddExpression:
#priority 2
| left:Expression "+" right:Expression

SubstractExpression:
#priority 2
| left:Expression "-" right:Expression

MultiplyExpression:
#priority 3
| left:Expression "*" Right:Expression

DivideExpression:
#priority 3
| left:Expression "/" Right:Expression

Statement:
#priority 1
| expr:Expression ";"

StatementList:
| car:Statement
| car:Statement cdr:StatementList

Block:
| "{" list:StatementList "}"

TypelessArgumentList:
| car:Identifier
| car:Identifier "," cdr:TypelessArgumentList
| car:Identifier ","

Lambda:
| "|" args:TypelessArgumentList "|" body:Expression
| "|" "|" body:Expression
| "|" args:TypelessArgumentList "|" body:Block
| "|" "|" body:Block

Arguments:
| car:Expression
| car:Expression "," cdr:Arguments
| car:Expression ","

FunctionCall:
#priority 6
| fn:Expression "(" ")"
| fn:Expression "(" args:Arguments ")"

Type:
| type:Identifier
| type:Identifier "<" generic:Type ">"

FieldAccess:
#priority 7
| obj:Expression "." field:Identifier

VariableDeclaration:
| "let" name:Identifier "=" value:Expression
| "let" name:Identifier ":" type:Type "=" value:Expression

ConstantDeclaration:
| "const" name:Identifier "=" value:Expression
| "const" name:Identifier ":" type:Type "=" value:Expression
