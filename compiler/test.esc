const fustibale = (class Fustibale {
    map: Map[string, float] = map! {
        "twenty": 20.0,
        "forty": 20.0
    },
    fn throw(snailName: string) Snail {
        #printing: for character in snailName {
            if character == 'x {
                continue #printing
            } else {
                if character == 'y {
                    break #printing 0
                }
            };
            stdout.writeln(character)
        };
        #randomPrinting: loop {
            if Math.random() < 0x.1 {
                stdout.writeln("meow");
                break #randomPrinting 1
            }
        };
        return Snail(snailName)
    }
})();
if x {
    [1, 3, 5, 7]
} else if y {
    [2, 4, 6, 8]
} else {
    [[1, 3, 5, 7], [2, 4, 6, 8]][0] + Math.random()
}
fn return_without_() {
    loop {
        break
    };
    #test: loop {
        break #test
    };
    return
}
/* fustibale.throw();
struct Fustibale {}
struct Fustibale Fustibale__new() {
    Fustibale f = {};
    return f;
}
void Fustibale__throw() {
    printf("Boom")
}
const fustibale = Fustibale__new();
Fustibale__throw(fustibale) */
/* function x() {
    /* code... */
} */ /* comment /* nested comment */ */
x => x * 2
`outer\'\
${`inner${class T {}}`}
$ {data}`;
class HugeSquirrel[X, Y: X, Z <= Y] {
    x = 1,
    const y = 2,
    static z = 3,
    static const w = 4,
    public x1 = 1,
    public const y1 = 2,
    public static z1 = 3,
    public static const w1 = 4,
    protected x2 = 1,
    protected const y2 = 2,
    protected static z2 = 3,
    protected static const w2 = 4,
    fn new(size: int = 3) HugeSquirrel[X, Y, Z] {
        let isHuge = true;
        isHuge = X == Y
    },
};

fn main[I, K, V <= K : (I, J)](x: T) T {
    for ,, {
        let x: List[int] = 0;
        let y = 1;
        (|x: string, y: int, z| stdout.writeln(string: x); stdout.writeln(y); stdout.writeln(z))("meow", x, y)
    };
    for i in x {
        i
    }
}

enum Result[T, E] {
    Ok(T),
    Err(E)
}
/* for let i = 0, i < 100, i++ {
    stdout.writeln("%d".format(i))
} */
/* <number>if 1 {
    let i = 10;
    while i < 0 {
        stdout.writeln("Hello World");
        i--
    };
    let x = 0;
    let y;
    const z = let w = 0;
    (list[{0}] + List[int]());
    File.open("file.txt", "r").read().split('\n)[0];
    ('a * -0b10.01 & 0xFF..sign) + (2 / 3)
} else {
    0
} */
0xFF00EE
// 0x$T
0xabc.def
24982
23903290.4893
0o325763427
/* /* /* */ */ */
'a 'b 'c
"meow\nmeow\\\'\\" // Expected: meow<newline>meow\'\
"doubleQuotedString on next line :
\"\"" // Expected: doubleQuotedString on next line:<newline>""
{[()]},/.
1 + 1 / 2 = 3;
i++
"operators following"
+
++
-
--
*
**
=
==
&
&&
|
||
[
]
{
}
(
)
/
,
.
;
<
>
<=
>=
>>
<<
for if while break continue fn else
my cat is furry
: